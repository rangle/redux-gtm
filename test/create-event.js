const createEvent = require('../lib/create-event');

describe('createEvent(eventDefinition, prevState, action)', () => {
  // createEvent takes in an event definition, a state object,
  // and an action object. It returns a new event object with
  // an "event" property (taken from the eventName key in the
  // event definition) and any key/value pairs generated by
  // the eventFields method in the event definition.

  it('Returns an object with an "event" property', () => {
    const eventDefinition = { eventName: 'some-event' };
    const actual = createEvent(eventDefinition);
    const expected = { event: 'some-event' };
    expect(actual).toEqual(expected);
  });

  it('Generates an event payload and merges it with the event object', () => {
    const eventFields = jest.fn(() => ({
      eventProp1: 'some-event-data',
      eventProp2: 'some-more-event-data',
    }));

    const eventDefinition = { eventName: 'some-event', eventFields };

    const prevState = { prop1: 'data1' };
    const action = { type: 'SOME_REDUX_ACTION' };

    const actual = createEvent(eventDefinition, prevState, action);
    const expected = {
      event: 'some-event',
      eventProp1: 'some-event-data',
      eventProp2: 'some-more-event-data',
    };

    expect(eventFields).toHaveBeenCalled();
    expect(eventFields).toHaveBeenCalledWith(prevState, action);
    expect(actual).toEqual(expected);
  });

  it('Uses the action type if an eventName is not provided in the definition', () => {
    const actual = createEvent({}, {}, { type: 'SOME_REDUX_ACTION' });
    const expected = { event: 'SOME_REDUX_ACTION' };
    expect(actual).toEqual(expected);
  });
});
